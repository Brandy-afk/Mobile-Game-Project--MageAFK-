// <auto-generated />
using System;
using System.Collections.Generic;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20240901164742_UpdatingForeignAlteration")]
    partial class UpdatingForeignAlteration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Domain.Modals.Currency.Currency", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("PlayerID")
                        .HasColumnType("integer");

                    b.Property<int>("TypeID")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("TypeID");

                    b.HasIndex("PlayerID", "TypeID")
                        .IsUnique();

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Backend.Domain.Modals.Currency.CurrencyType", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TypeID");

                    b.ToTable("CurrencyTypes");
                });

            modelBuilder.Entity("Backend.Domain.Modals.ElixirShop", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerID")
                        .HasColumnType("integer");

                    b.Property<bool>("Purchased")
                        .HasColumnType("boolean");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("PlayerID");

                    b.ToTable("ElixirShops");
                });

            modelBuilder.Entity("Backend.Domain.Modals.GameRun", b =>
                {
                    b.Property<int>("GameRunID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GameRunID"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GameState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PlayerID")
                        .HasColumnType("integer");

                    b.HasKey("GameRunID");

                    b.HasIndex("PlayerID");

                    b.ToTable("GameRuns");
                });

            modelBuilder.Entity("Backend.Domain.Modals.History", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<bool>("BestWave")
                        .HasColumnType("boolean");

                    b.Property<float>("Damage")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("Location")
                        .HasColumnType("integer");

                    b.Property<string>("Metrics")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<int>>("Mob")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("PlayerID")
                        .HasColumnType("integer");

                    b.Property<List<int>>("Spell")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Wave")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("Location");

                    b.HasIndex("PlayerID");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("Backend.Domain.Modals.Location.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("BestWave")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerID")
                        .HasColumnType("integer");

                    b.Property<int>("TypeID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("TypeID");

                    b.HasIndex("PlayerID", "TypeID")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Backend.Domain.Modals.Location.LocationType", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TypeID");

                    b.ToTable("LocationTypes");
                });

            modelBuilder.Entity("Backend.Domain.Modals.Milestones.Milestone", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("PlayerID")
                        .HasColumnType("integer");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<int>("RewardPoolSize")
                        .HasColumnType("integer");

                    b.Property<int>("TypeID")
                        .HasColumnType("integer");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("TypeID");

                    b.HasIndex("PlayerID", "TypeID")
                        .IsUnique();

                    b.ToTable("Milestones");
                });

            modelBuilder.Entity("Backend.Domain.Modals.Milestones.MilestoneType", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TypeID");

                    b.ToTable("MilestoneTypes");
                });

            modelBuilder.Entity("Backend.Domain.Modals.Player", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Backend.Domain.Modals.PlayerStatistics.Statistic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("PlayerID")
                        .HasColumnType("integer");

                    b.Property<int>("TypeID")
                        .HasColumnType("integer");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("TypeID");

                    b.HasIndex("PlayerID", "TypeID")
                        .IsUnique();

                    b.ToTable("PlayerStatistics");
                });

            modelBuilder.Entity("Backend.Domain.Modals.PlayerStatistics.StatisticType", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TypeID");

                    b.ToTable("StatisticTypes");
                });

            modelBuilder.Entity("Backend.Domain.Modals.RecipeShop", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("PlayerID")
                        .HasColumnType("integer");

                    b.Property<List<int>>("RecipeIDs")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("ID");

                    b.HasIndex("PlayerID")
                        .IsUnique();

                    b.ToTable("RecipeShops");
                });

            modelBuilder.Entity("Backend.Domain.Modals.Recipes.Recipe", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("PlayerID")
                        .HasColumnType("integer");

                    b.Property<int>("TypeID")
                        .HasColumnType("integer");

                    b.Property<bool>("Unlocked")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.HasIndex("TypeID");

                    b.HasIndex("PlayerID", "TypeID")
                        .IsUnique();

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Backend.Domain.Modals.Recipes.RecipeType", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TypeID");

                    b.ToTable("RecipeTypes");
                });

            modelBuilder.Entity("Backend.Domain.Modals.Skills.Skill", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("PlayerID")
                        .HasColumnType("integer");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("TypeID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("TypeID");

                    b.HasIndex("PlayerID", "TypeID")
                        .IsUnique();

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Backend.Domain.Modals.Skills.SkillType", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TypeID");

                    b.ToTable("SkillTypes");
                });

            modelBuilder.Entity("Backend.Domain.Modals.Spells.SpellStatistic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("Cast")
                        .HasColumnType("integer");

                    b.Property<float>("Damage")
                        .HasColumnType("real");

                    b.Property<int>("Kills")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerID")
                        .HasColumnType("integer");

                    b.Property<int>("TypeID")
                        .HasColumnType("integer");

                    b.Property<int>("Upgraded")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("TypeID");

                    b.HasIndex("PlayerID", "TypeID")
                        .IsUnique();

                    b.ToTable("SpellStatistics");
                });

            modelBuilder.Entity("Backend.Domain.Modals.Spells.SpellStatisticType", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TypeID");

                    b.ToTable("SpellTypes");
                });

            modelBuilder.Entity("Backend.Domain.Modals.Currency.Currency", b =>
                {
                    b.HasOne("Backend.Domain.Modals.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Modals.Currency.CurrencyType", null)
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Modals.ElixirShop", b =>
                {
                    b.HasOne("Backend.Domain.Modals.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Modals.GameRun", b =>
                {
                    b.HasOne("Backend.Domain.Modals.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Modals.History", b =>
                {
                    b.HasOne("Backend.Domain.Modals.Location.Location", null)
                        .WithMany()
                        .HasForeignKey("Location")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Modals.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Modals.Location.Location", b =>
                {
                    b.HasOne("Backend.Domain.Modals.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Modals.Location.LocationType", null)
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Modals.Milestones.Milestone", b =>
                {
                    b.HasOne("Backend.Domain.Modals.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Modals.Milestones.MilestoneType", null)
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Modals.PlayerStatistics.Statistic", b =>
                {
                    b.HasOne("Backend.Domain.Modals.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Modals.PlayerStatistics.StatisticType", null)
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Modals.RecipeShop", b =>
                {
                    b.HasOne("Backend.Domain.Modals.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Modals.Recipes.Recipe", b =>
                {
                    b.HasOne("Backend.Domain.Modals.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Modals.Recipes.RecipeType", null)
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Modals.Skills.Skill", b =>
                {
                    b.HasOne("Backend.Domain.Modals.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Modals.Skills.SkillType", null)
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Modals.Spells.SpellStatistic", b =>
                {
                    b.HasOne("Backend.Domain.Modals.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Modals.Spells.SpellStatisticType", null)
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
